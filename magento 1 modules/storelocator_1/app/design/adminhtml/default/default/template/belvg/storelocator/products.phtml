<?php
/**
 * BelVG LLC.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the EULA
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://store.belvg.com/BelVG-LICENSE-COMMUNITY.txt
 *
 * **************************************
 *         MAGENTO EDITION USAGE NOTICE *
 * ***************************************
 * This package designed for Magento COMMUNITY edition
 * BelVG does not guarantee correct work of this extension
 * on any other Magento edition except Magento COMMUNITY edition.
 * BelVG does not provide extension support in case of
 * incorrect edition usage.
 * **************************************
 *         DISCLAIMER   *
 * ***************************************
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future.
 * ****************************************************
 * @category    Belvg
 * @package     Belvg_Storelocator
 * @copyright   Copyright (c) 2010 - 2015 BelVG LLC. (http://www.belvg.com)
 * @license     http://store.belvg.com/BelVG-LICENSE-COMMUNITY.txt
 */
?>


<?php if (($block = $this->getLayout()->getBlock('store_edit_tab_product')) && $_gridJsObject = $block->getJsObjectName()): ?>
    <script type="text/javascript">
        var locationProducts = $H(<?php echo $this->getProductsJson() ?>);

        Event.observe(window, 'load', function () {
            $('store_main_in_location').value = locationProducts.toQueryString();

            function registerLocationProduct(grid, element, checked) {
                if (checked) {
                    locationProducts.set(element.value, element.value);
                }
                else {
                    locationProducts.unset(element.value);
                }
                $('store_main_in_location').value = locationProducts.toQueryString();
                grid.reloadParams = {'selected_products[]': locationProducts.keys()};
            }

            function locationProductRowClick(grid, event) {
                var trElement = Event.findElement(event, 'tr');
                var isInput = Event.element(event).tagName == 'INPUT';
                if (trElement) {
                    var checkbox = Element.getElementsBySelector(trElement, 'input');
                    if (checkbox[0]) {
                        var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;
                        <?php echo $_gridJsObject ?>.
                        setCheckboxChecked(checkbox[0], checked);
                    }
                }
            }

            var tabIndex = 1000;

            function locationProductRowInit(grid, row) {
                var checkbox = $(row).getElementsByClassName('checkbox')[0];
                var position = $(row).getElementsByClassName('input-text')[0];
                if (checkbox && position) {
                    checkbox.positionElement = position;
                    position.checkboxElement = checkbox;
                    position.disabled = !checkbox.checked;
                    position.tabIndex = tabIndex++;
                    Event.observe(position, 'keyup', positionChange);
                }
            }


            <?php echo $_gridJsObject ?>.
            rowClickCallback = locationProductRowClick;
            <?php echo $_gridJsObject ?>.
            initRowCallback = locationProductRowInit;
            <?php echo $_gridJsObject ?>.
            checkboxCheckCallback = registerLocationProduct;
            <?php echo $_gridJsObject ?>.
            rows.each(function (row) {
                locationProductRowInit(<?php echo $_gridJsObject ?>, row)
            });
        });
    </script>
<?php endif; ?>
